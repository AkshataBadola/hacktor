from collections import deque
import networkx as nx
from typing import Deque, List
from .crawler import ModelCrawler, TraversalStrategy

class ModelFuzzer:
    def __init__(self, crawler: ModelCrawler):
        """
        Initialize ModelFuzzer with a ModelCrawler instance.

        Parameters:
        - crawler (ModelCrawler): The model crawler instance from which the fuzzer will derive its tree, model factory, and other settings.
        - strategy (TraversalStrategy): The traversal strategy, either BFS or DFS.
        """
        self.crawler = crawler
        self.crawler_options = crawler.options
        self.tree = crawler.get_tree()
        self.strategy = self.crawler_options.strategy
        self.model_factory = crawler.model_factory
        self.current_model = None  # This will hold the current model instance
        self.current_node_id = 0   # Start at the root node

        # Initialize traversal structures based on tree and traversal strategy
        self.nodes_to_visit = self._initialize_nodes_to_visit()

    def _initialize_nodes_to_visit(self):
        """
        Initialize the traversal structure (BFS or DFS) based on the current tree structure and strategy.

        Returns:
        - A deque or list containing the node IDs in the order they should be visited.
        """
        if self.strategy == TraversalStrategy.BFS:
            # Use networkx.bfs_tree to generate nodes in BFS order
            nodes = list(nx.bfs_tree(self.tree, source=0).nodes)
        else:  # DFS
            # Use networkx.dfs_preorder_nodes to generate nodes in DFS pre-order
            nodes = list(nx.dfs_preorder_nodes(self.tree, source=0))
        return deque(nodes[1:])  # Use deque for BFS

    def start(self):
        """
        Reset the fuzzer to the initial state, starting at the root node and creating the initial model.
        This includes resetting the traversal structure (BFS or DFS) and other state variables.
        """
        # Reset current node and model
        self.current_node_id = 0  # Reset to root node
        self.current_model = self.model_factory.new()  # Create a new model for the root

        # Reset the traversal structure
        self.nodes_to_visit = self._initialize_nodes_to_visit()
    
    def invoke(self, prompt: str) -> str:
        """
        Invoke the current model with a specific prompt and return the response.

        Parameters:
        - prompt (str): The prompt to send to the model.

        Returns:
        - str: The response generated by the model.
        """
        if self.current_model is None:
            raise Exception("Fuzzer has not been started. Please call start() before invoking.")
        
        _, response = self.current_model.generate(prompt)
        return response
    
    def next(self):
        """
        Traverse to the next node in the conversation tree based on the selected traversal strategy.
        Update the current_model as per the traversal path, ensuring it reflects the correct state.

        Raises:
        - StopIteration: When there are no more nodes to traverse in the conversation tree.
        """
        if not self.nodes_to_visit:
            raise StopIteration("No further nodes to traverse in the conversation tree.")

        # Get the next node ID based on the traversal strategy
        self.current_node_id = self.nodes_to_visit.popleft()

        # Create a new model instance for the current node's state
        self.current_model = self.model_factory.new()

        # Traverse from root to this node to ensure current model reflects the traversal path
        traversal_path = nx.shortest_path(self.tree, source=0, target=self.current_node_id)
        for node_id in traversal_path[1:]:  # Start from the first child node to follow the path
            node_prompt = self.tree.nodes[node_id]["prompt"]
            self.current_model.generate(node_prompt)


class ModelFuzzerBuilder:
    def __init__(self, crawler: ModelCrawler):
        """
        Initialize ModelFuzzerBuilder with a ModelCrawler instance.

        Parameters:
        - crawler (ModelCrawler): The model crawler instance that will be used to build the fuzzer.
        """
        self.crawler = crawler
    
    def build(self) -> ModelFuzzer:
        """
        Build and return an instance of ModelFuzzer.

        Returns:
        - ModelFuzzer: A ModelFuzzer instance.
        """
        return ModelFuzzer(self.crawler)


# Example usage:
# options = ModelCrawlerOptions(max_depth=3, initial_prompts=["Hello", "How are you?"])
# model_factory = YourModelFactoryImplementation()
# prompt_generator = YourNextPromptGeneratorImplementation()
# crawler = ModelCrawler(model_factory, prompt_generator, options)
# crawler.crawl()

# fuzzer_builder = ModelFuzzerBuilder(crawler)
# model_fuzzer = fuzzer_builder.build(strategy=TraversalStrategy.BFS)  # or TraversalStrategy.DFS

# model_fuzzer.start()
# response = model_fuzzer.invoke("Hello")
# print("Response:", response)

# try:
#     while True:
#         model_fuzzer.next()  # Traverse to the next node
#         response = model_fuzzer.invoke("Next prompt text")
#         print("Response:", response)
# except StopIteration:
#     print("Traversal complete. No more nodes to traverse.")
